---
title: "Ayudant√≠a: APIs y Webscraping "
subtitle: "IMT2200 2025-2"
format: 
    html:
        theme: "Cosmo"
        code-fold: show 
        embed-resources: true   
        code-tools: true    
        code-summary: "Mostrar/Ocultar c√≥digo"  
        code-fold-default: false  #
execute: 
  enabled: true
number-sections: true
toc: true
toc-title: "Contenido"

jupyter: python3

---

# Introducci√≥n

En esta ayudant√≠a veremos de manera introductoria:

-   Qu√© es HTML y porqu√© nos sirve saber de √©l.
-   Qu√© son los protocolos y c√≥mo se relacionan con la web.
-   Ejemplos pr√°cticos de Webscraping en Python.
-   Ejemplo de uso de una API.

------------------------------------------------------------------------

# ¬øQu√© es HTML?

HTML es el lenguaje de marcado que estructura el contenido de la web, de ah√≠ vienen los archivos *`nombre.html`* . Estos archivos son los que visualizamos a la hora de entrar a cualquier p√°gina web, es lo que los navegadores procesan y muestran en nuestras pantallas.

Este lenguaje tiene una estructura y una l√≥gica. No es necesario que conozcamos todas sus caracter√≠sticas, pero s√≠ entendamos c√≥mo se comporta.

Los bloques que construyen un *`archivo.html`* son las **etiquetas/tags** (eg: `<h1>`,`<p>`,`<div>`, etc), cada una de estas es interpretada como un distinto tipo de informaci√≥n o bloque y contienen caracter√≠sticas intr√≠nsecas (que pueden ser modificadas).

Por ejemplo :

```{html}
<h1>Hola mundo</h1>
<p>Este es un p√°rrafo con un <a href="https://www.wikipedia.org">link</a>.</p>
```

Se renderizar√≠a en una p√°gina web as√≠ :

::: {style="border: 1px solid black; padding: 10px; background-color: #e4e3e3ff;"}
<h1>Hola mundo</h1>

<p>Este es un p√°rrafo con un <a href="https://www.wikipedia.org">link</a>.</p>
:::

------------------------------------------------------------------------

Podemos hacernos una idea visual del comportamiento de los elementos como sigue:

![Esquema HTML](imgs/html.png){width="50%" height="50%"}

Es bueno pensar que cada etiqueta **html** es como un objeto de **python**, y por lo tanto tiene atributos (que son las cosas que podemos editar), los que nos sirve saber para este curso :

-   `id`: Identificador √∫nico de alg√∫n elemento.

-   `class`: Clase o categor√≠a a la que pertenece el elemento, por ejemplo: `class="img-pequenas"`.

-   `style`: Estilos CSS aplicados al elemento. Aqu√≠ podemos modificar m√°rgenes, anchos, alturas, relleno, colores, etc. Es todo otro lenguaje, que se escapa del alcance del curso.

Ahora, que conocemos el material con el que se trabaja en la web, veamos c√≥mo se comunican los diferentes agentes de este proceso, y que hacen posible la existencia del internet.

# Protocolos: HTTP y HTTPS

Para que sea posible acceder a una p√°gina web, dependiendo de su contenido, pasan una serie de procesos y protocolos. Tenemos **HTTP** (HyperText Transfer Protocol) y su versi√≥n segura **HTTPS** (HTTP Secure).

Podemos decir que este protocolo se compone de los siguientes pasos:

-   Tu navegador (cliente) env√≠a una solicitud (request).(¬øA qui√©n? üßê)
-   Digamos que a otro computador, el servidor le llamaremos, quien recibe esa se√±al, dependiendo del mensaje, da una respuesta.
-   la respuesta llega, y el navegador la procesa para mostrarla al usuario.

(esta ejemplificaci√≥n est√° muy simplificada, pero es la idea general)

![Arquitectura Cliente-Servidor](imgs/cliente.png){width="50%" height="50%"}

### Las solicitudes (HTTP Requests)

Las solicitudes HTTP son la forma en que los navegadores y otros clientes se comunican con los servidores. Estas anticipan la naturaleza de la interacci√≥n que se desea tener con el servidor. Las m√°s relevantes son:

-   **GET**: Solicita datos del servidor. Es la m√°s com√∫n y se utiliza para obtener informaci√≥n.
-   **POST**: Env√≠a datos al servidor. Se utiliza para enviar informaci√≥n, como formularios.
-   **PUT**: Actualiza datos en el servidor.
-   **DELETE**: Elimina datos del servidor.

[üëâ **Ejemplo:**]{.underline}

Cuando escribes `https://www.google.com`, tu navegador hace un GET al servidor de Google. Google recibe la solicitud, la revisa y responde con su p√°gina de inicio. Esto finalmente se muestra en tu navegador.

------------------------------------------------------------------------

# Webscraping

¬øDe que nos sirve saber todo esto? En ciencia de datos, muchas veces queremos extraer informaci√≥n de p√°ginas web.
Entonces, ahora que ya conocemos, a grandes rasgos, el comportamiento y estructura de la web, podemos entender mejor
los procesos que son necesarios para el Webscraping.

Pero ¬øqu√© es el Webscraping? Es la t√©cnica utilizada para extraer informaci√≥n de sitios web de manera automatizada (cuando no podemos obtener la informaci√≥n de otra forma). En esta ocasi√≥n ocuparemos algunas librerias de python para hacer el scrapping HTML de las p√°ginas web.

Veamos un peque√±o ejemplo :

```{python}
import requests
from bs4 import BeautifulSoup

url = "https://quotes.toscrape.com/"
response = requests.get(url) # Hacemos la solicitud GET
print(response.status_code) # 200 es que todo sali√≥ bien
print(response)
```

**¬øQu√© esta pasando?** 

`response.text` nos da el HTML (de la p√°gina que solicitamos) como un string. Luego  usaremos *BeautifulSoup* para transformar ese string de HTML en una estructura m√°s manejable.

```{python}

bs = BeautifulSoup(response.text, 'html.parser') # Parseamos el HTML
quotes = [q.get_text() for q in bs.select(".quote span.text")]
quotes[:5]
```
------------------------------------------------------------------------

Pero lo que buscamos es informaci√≥n espec√≠fica.Con `.select()` buscamos dentro del HTML todos los elementos que cumplan con lo especificado en los argumentos.

En este caso:

`.quote` significa ‚Äúcualquier elemento con la clase quote‚Äù (las clases se designan con un "**.**").

`span.text` significa ‚Äúdentro de eso, los `<span>` que tengan la clase text‚Äù.

Esto nos devuelve una lista de esos elementos solicitados. Luego simplemente imprimimos los primeros 5 para
verificar que se ejecut√≥ correctamente nuestro c√≥digo. 

# APIs

Como ya vieron en clases, tambi√©n existen las APIs (Application Programming Interfaces) que nos permiten obtener datos de forma estructurada, sin necesidad de webscraping. 
Las APIs tambi√©n requieren cierto protocolo y estructura, dependen sobre todo del proveedor.
Algunas son de libre acceso, otras pagadas, otras requieren autenticaci√≥n, etc. 


Ejemplo manejo de una API p√∫blica (Pok√©mon):

```{python}
import requests

url = "https://pokeapi.co/api/v2/pokemon/pikachu"
data = requests.get(url).json() # pasamos la respuesta a JSON
data["abilities"] # JSON podemos acceder a los atributos como si fuera un diccionario (tiene estructura clave:valor)
```

Para una API que requiere API Key, podemos hacer lo sgte : 

```{python}
import requests
import datetime

API_KEY = "DEMO_KEY"
date = datetime.date.today() - datetime.timedelta(days=1)

url = F"https://api.nasa.gov/planetary/apod?api_key={API_KEY}&date={date}"
headers = {
    "Authorization": f"Bearer {API_KEY}"
}
data = requests.get(url, headers=headers).json()
data
```
------------------------------------------------------------------------

Es muy similar a la anterior, pero ahora el proveedor nos esta pidiendo una autenticaci√≥n antes de darnos acceso a los datos.
Sin esa autenticaci√≥n no podemos hacer nada. Esta es una forma com√∫n de proteger las APIs y asegurar que solo los usuarios autorizados puedan acceder a los datos ( y tambi√©n modificarlos, seg√∫n su nivel de acceso).


![Arquitectura API](imgs/api.avif){width="50%" height="50%"}

